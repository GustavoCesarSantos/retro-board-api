// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/refresh-token": {
            "post": {
                "description": "This endpoint accepts a refresh token and returns a new access token if the refresh token is valid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Identity"
                ],
                "summary": "Refresh access token using the provided refresh token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.RefreshAuthTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/identity.RefreshAuthTokenEnvelope"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or invalid refresh token or invalid credentials)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "description": "This endpoint signs in a user based on their email, generates an access token and a refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Identity"
                ],
                "summary": "Sign in user and generate access and refresh tokens",
                "parameters": [
                    {
                        "description": "User email",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.SigninUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens generated successfully",
                        "schema": {
                            "$ref": "#/definitions/identity.SigninUserEnvelope"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/auth/signout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint invalidates the user's current session by incrementing their token version.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Identity"
                ],
                "summary": "Sign out the current user",
                "responses": {
                    "204": {
                        "description": "User signed out successfully"
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "description": "Returns the current health status of the application and environment information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Monitor"
                ],
                "summary": "Application health check",
                "responses": {
                    "200": {
                        "description": "Health check result",
                        "schema": {
                            "$ref": "#/definitions/monitor.HealthCheckEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/identity/signin/google": {
            "get": {
                "description": "This endpoint starts the OAuth2.0 sign-in flow with Google.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Identity"
                ],
                "summary": "Initiates OAuth2.0 sign-in with Google",
                "responses": {
                    "200": {
                        "description": "Redirecting to Google for authentication",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint fetches all teams associated with the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "List all teams",
                "responses": {
                    "200": {
                        "description": "List of teams successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/team.ListAllTeamsEnvelop"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a user to create a new team and automatically assigns the user as the admin of the team.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Create a new team",
                "parameters": [
                    {
                        "description": "Name of the team to be created",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Team created successfully",
                        "schema": {
                            "$ref": "#/definitions/team.CreateTeamEnvelop"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint retrieves detailed information about a specific team. The user must be a member of the team to access this information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Get details of a specific team",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the team",
                        "schema": {
                            "$ref": "#/definitions/team.ShowTeamEnvelop"
                        }
                    },
                    "404": {
                        "description": "Not Found - Team not found or user not a member",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/members": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new member to a team with a specific role, provided the authenticated user is an admin of the team.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Adds a member to a team",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Member details (ID and role)",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.AddMemberToTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Member added successfully"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or insufficient permissions)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/members/:memberId": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint removes a specific member from a team. Only admins are allowed to perform this operation.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Remove a member from a team",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Member ID",
                        "name": "memberId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Member removed successfully"
                    },
                    "400": {
                        "description": "Invalid request (e.g., Invalid input or unauthorized operation)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Not Found - Team or member not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/members/:memberId/roles": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows an admin of a team to change the role of another member within the team.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Change a member's role in a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the team",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the member whose role is being changed",
                        "name": "memberId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New role for the member",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ChangeMemberRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Role updated successfully"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or insufficient permissions)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team or member not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.AddMemberToTeamRequest": {
            "type": "object",
            "properties": {
                "memberId": {
                    "type": "integer",
                    "example": 1
                },
                "roleId": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "dtos.ChangeMemberRoleRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dtos.CreateTeamRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "dtos.CreateTeamResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "team1"
                }
            }
        },
        "dtos.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "available"
                },
                "system_info": {
                    "$ref": "#/definitions/internal_modules_monitor_presentation_dtos.SystemInfo"
                }
            }
        },
        "dtos.ListAllTeamsResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "team1"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dtos.RefreshAuthTokenRequest": {
            "type": "object",
            "properties": {
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "dtos.ShowTeamResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "team1"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dtos.SigninUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "teste@teste.com"
                }
            }
        },
        "dtos.SigninUserResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "identity.RefreshAuthTokenEnvelope": {
            "type": "object",
            "properties": {
                "refreshed_token": {
                    "type": "string"
                }
            }
        },
        "identity.SigninUserEnvelope": {
            "type": "object",
            "properties": {
                "signin_tokens": {
                    "$ref": "#/definitions/dtos.SigninUserResponse"
                }
            }
        },
        "internal_modules_monitor_presentation_dtos.SystemInfo": {
            "type": "object",
            "properties": {
                "environment": {
                    "type": "string",
                    "example": "develop"
                }
            }
        },
        "monitor.HealthCheckEnvelope": {
            "type": "object",
            "properties": {
                "health_check": {
                    "$ref": "#/definitions/dtos.HealthCheckResponse"
                }
            }
        },
        "team.CreateTeamEnvelop": {
            "type": "object",
            "properties": {
                "team": {
                    "$ref": "#/definitions/dtos.CreateTeamResponse"
                }
            }
        },
        "team.ListAllTeamsEnvelop": {
            "type": "object",
            "properties": {
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ListAllTeamsResponse"
                    }
                }
            }
        },
        "team.ShowTeamEnvelop": {
            "type": "object",
            "properties": {
                "team": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ShowTeamResponse"
                    }
                }
            }
        },
        "utils.ErrorEnvelope": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "error message"
                }
            }
        }
    },
    "securityDefinitions": {
        "": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9000",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Retro Board API",
	Description:      "Documentação da API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
