{
    "swagger": "2.0",
    "info": {
        "description": "Documentação da API.",
        "title": "Retro Board API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:9000",
    "basePath": "/v1",
    "paths": {
        "/auth/refresh-token": {
            "post": {
                "description": "This endpoint accepts a refresh token and returns a new access token if the refresh token is valid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Identity"
                ],
                "summary": "Refresh access token using the provided refresh token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.RefreshAuthTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/identity.RefreshAuthTokenEnvelope"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or invalid refresh token or invalid credentials)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "description": "This endpoint signs in a user based on their email, generates an access token and a refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Identity"
                ],
                "summary": "Sign in user and generate access and refresh tokens",
                "parameters": [
                    {
                        "description": "User email",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.SigninUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens generated successfully",
                        "schema": {
                            "$ref": "#/definitions/identity.SigninUserEnvelope"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/auth/signin/google": {
            "get": {
                "description": "This endpoint starts the OAuth2.0 sign-in flow with Google.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Identity"
                ],
                "summary": "Initiates OAuth2.0 sign-in with Google",
                "responses": {
                    "200": {
                        "description": "Redirecting to Google for authentication",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/auth/signout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint invalidates the user's current session by incrementing their token version.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Identity"
                ],
                "summary": "Sign out the current user",
                "responses": {
                    "204": {
                        "description": "User signed out successfully"
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/healthcheck": {
            "get": {
                "description": "Returns the current health status of the application and environment information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Monitor"
                ],
                "summary": "Application health check",
                "responses": {
                    "200": {
                        "description": "Health check result",
                        "schema": {
                            "$ref": "#/definitions/monitor.HealthCheckEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint fetches all teams associated with the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "List all teams",
                "responses": {
                    "200": {
                        "description": "List of teams successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/team.ListAllTeamsEnvelop"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows a user to create a new team and automatically assigns the user as the admin of the team.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Create a new team",
                "parameters": [
                    {
                        "description": "Name of the team to be created",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Team created successfully",
                        "schema": {
                            "$ref": "#/definitions/team.CreateTeamEnvelop"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint retrieves detailed information about a specific team. The user must be a member of the team to access this information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Get details of a specific team",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the team",
                        "schema": {
                            "$ref": "#/definitions/team.ShowTeamEnvelop"
                        }
                    },
                    "404": {
                        "description": "Not Found - Team not found or user not a member",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/boards": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all boards associated with a specific team.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "List all boards for a team",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of boards",
                        "schema": {
                            "$ref": "#/definitions/board.ListAllBoardsEnvelop"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a board associated with the specified team.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "Create a new board",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Board creation data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateBoardRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Board successfully created",
                        "schema": {
                            "$ref": "#/definitions/board.CreateBoardEnvelop"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/boards/:boardId": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the name or activation status of a board.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "Edit a board",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Board update details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.EditBoardRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Board successfully updated"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team or board not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a board associated with the specified team and board ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "Delete a board",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Board successfully deleted"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team or board not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/boards/:boardId/columns": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all columns associated with a specific board.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "List all columns for a board",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of columns",
                        "schema": {
                            "$ref": "#/definitions/board.ListAllColumnsEnvelop"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or invalid input data)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a column associated with the specified board and team.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "Create a new column",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Column creation data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateColumnRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Column successfully created",
                        "schema": {
                            "$ref": "#/definitions/board.CreateColumnEnvelop"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team or board not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/boards/:boardId/columns/:columnId": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the details of a column, such as name and color.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "Edit a column",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Column ID",
                        "name": "columnId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Column update details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.EditColumnRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Column successfully updated"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team, board, or column not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a column associated with the specified team, board, and column ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "Delete a column",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Column ID",
                        "name": "columnId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Column successfully deleted"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team, board, or column not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/boards/:boardId/columns/:columnId/cards": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all cards associated with a specific column on a board.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "List all cards for a column on a board",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Column ID",
                        "name": "columnId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of cards",
                        "schema": {
                            "$ref": "#/definitions/board.ListAllCardsEnvelop"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or invalid input data)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Board or column not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a card associated with the specified column, board, and team.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "Create a new card",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Column ID",
                        "name": "columnId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Card creation data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateCardRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Card successfully created",
                        "schema": {
                            "$ref": "#/definitions/board.CreateCardEnvelop"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team, board, or column not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/boards/:boardId/columns/:columnId/cards/:cardId": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of a specific card based on its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "Get a single card by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Column ID",
                        "name": "columnId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Card ID",
                        "name": "cardId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Card details",
                        "schema": {
                            "$ref": "#/definitions/board.ListCardEnvelop"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or invalid input data)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Card not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the text content of a card.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "Edit a card",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Column ID",
                        "name": "columnId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Card ID",
                        "name": "cardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Card update details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.EditCardRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Card successfully updated"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team, board, column, or card not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a card associated with the specified team, board, column, and card ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "Delete a card",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Column ID",
                        "name": "columnId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Card ID",
                        "name": "cardId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Card successfully deleted"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team, board, column, or card not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/boards/:boardId/columns/:columnId/cards/:cardId/move": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Moves a card from one column to another in a specific board.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Board"
                ],
                "summary": "Move a card to another column",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Board ID",
                        "name": "boardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Column ID",
                        "name": "columnId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Card ID",
                        "name": "cardId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New Column ID",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.MoveCardtoAnotherColumnRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Card moved successfully"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or invalid input data)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Card or column not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/members": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new member to a team with a specific role, provided the authenticated user is an admin of the team.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Adds a member to a team",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Member details (ID and role)",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.AddMemberToTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Member added successfully"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or insufficient permissions)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/members/:memberId": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint removes a specific member from a team. Only admins are allowed to perform this operation.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Remove a member from a team",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Member ID",
                        "name": "memberId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Member removed successfully"
                    },
                    "400": {
                        "description": "Invalid request (e.g., Invalid input or unauthorized operation)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Not Found - Team or member not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/members/:memberId/roles": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows an admin of a team to change the role of another member within the team.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Change a member's role in a team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the team",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the member whose role is being changed",
                        "name": "memberId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New role for the member",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ChangeMemberRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Role updated successfully"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or insufficient permissions)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Team or member not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/polls": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all polls associated with a specific team.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Poll"
                ],
                "summary": "List all polls",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of polls",
                        "schema": {
                            "$ref": "#/definitions/poll.ListAllPollsEnvelop"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new poll with options for a specific team.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Poll"
                ],
                "summary": "Create a new poll",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Poll creation data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreatePollRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Poll created successfully"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/polls/:pollId": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves detailed information about a specific poll.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Poll"
                ],
                "summary": "Get poll details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Poll ID",
                        "name": "pollId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Poll details",
                        "schema": {
                            "$ref": "#/definitions/poll.ListPollEnvelop"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Poll not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/polls/:pollId/options/:optionId": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an option from a specific poll, ensuring proper ownership validation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Poll"
                ],
                "summary": "Delete an option from a poll",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Poll ID",
                        "name": "pollId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Option ID",
                        "name": "optionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Option deleted successfully"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/polls/:pollId/options/:optionId/vote": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cast a vote for a specific option in a poll.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Poll"
                ],
                "summary": "Vote in a poll",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Poll ID",
                        "name": "pollId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Option ID",
                        "name": "optionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Vote successfully recorded"
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "403": {
                        "description": "User is not allowed to vote on this poll",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Poll or option not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        },
        "/teams/:teamId/polls/:pollId/result": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the result of a poll, including the total votes, votes per option, and the winning option.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Poll"
                ],
                "summary": "Show poll result",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Team ID",
                        "name": "teamId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Poll ID",
                        "name": "pollId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Poll results",
                        "schema": {
                            "$ref": "#/definitions/poll.ShowPollResultEnvelop"
                        }
                    },
                    "400": {
                        "description": "Invalid request (e.g., missing parameters or validation error)",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "404": {
                        "description": "Poll not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorEnvelope"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "application.Option": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "1"
                },
                "votes": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "application.Winner": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "1"
                },
                "votes": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "board.CreateBoardEnvelop": {
            "type": "object",
            "properties": {
                "board": {
                    "$ref": "#/definitions/dtos.CreateBoardResponse"
                }
            }
        },
        "board.CreateCardEnvelop": {
            "type": "object",
            "properties": {
                "card": {
                    "$ref": "#/definitions/dtos.CreateCardResponse"
                }
            }
        },
        "board.CreateColumnEnvelop": {
            "type": "object",
            "properties": {
                "column": {
                    "$ref": "#/definitions/dtos.CreateColumnResponse"
                }
            }
        },
        "board.ListAllBoardsEnvelop": {
            "type": "object",
            "properties": {
                "boards": {
                    "$ref": "#/definitions/dtos.ListAllBoardsResponsePaginated"
                }
            }
        },
        "board.ListAllCardsEnvelop": {
            "type": "object",
            "properties": {
                "cards": {
                    "$ref": "#/definitions/dtos.ListAllCardsResponsePaginated"
                }
            }
        },
        "board.ListAllColumnsEnvelop": {
            "type": "object",
            "properties": {
                "columns": {
                    "$ref": "#/definitions/dtos.ListAllColumnsResponsePaginated"
                }
            }
        },
        "board.ListCardEnvelop": {
            "type": "object",
            "properties": {
                "card": {
                    "$ref": "#/definitions/dtos.ListCardResponse"
                }
            }
        },
        "dtos.AddMemberToTeamRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "useremail@foo.bar"
                },
                "role_id": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "dtos.ChangeMemberRoleRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dtos.CreateBoardRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "board1"
                }
            }
        },
        "dtos.CreateBoardResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "board1"
                }
            }
        },
        "dtos.CreateCardRequest": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string",
                    "example": "card1-text"
                }
            }
        },
        "dtos.CreateCardResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "text": {
                    "type": "string",
                    "example": "card1-text"
                }
            }
        },
        "dtos.CreateColumnRequest": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string",
                    "example": "#FFFFFF"
                },
                "name": {
                    "type": "string",
                    "example": "column1"
                }
            }
        },
        "dtos.CreateColumnResponse": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string",
                    "example": "#FFFFFF"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "column1"
                }
            }
        },
        "dtos.CreatePollRequest": {
            "type": "object",
            "properties": {
                "poll": {
                    "$ref": "#/definitions/dtos.Poll"
                }
            }
        },
        "dtos.CreateTeamRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "dtos.CreateTeamResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "team1"
                }
            }
        },
        "dtos.EditBoardRequest": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "new-board1"
                }
            }
        },
        "dtos.EditCardRequest": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string",
                    "example": "new-card1-text"
                }
            }
        },
        "dtos.EditColumnRequest": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string",
                    "example": "#000000"
                },
                "name": {
                    "type": "string",
                    "example": "new-column1"
                }
            }
        },
        "dtos.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "available"
                },
                "system_info": {
                    "$ref": "#/definitions/dtos.SystemInfo"
                }
            }
        },
        "dtos.ListAllBoardsResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "board1"
                },
                "team_id": {
                    "type": "integer",
                    "example": 2
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dtos.ListAllBoardsResponsePaginated": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ListAllBoardsResponse"
                    }
                },
                "next_cursor": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "dtos.ListAllCardsResponse": {
            "type": "object",
            "properties": {
                "column_id": {
                    "type": "integer",
                    "example": 2
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "member_id": {
                    "type": "integer",
                    "example": 2
                },
                "text": {
                    "type": "string",
                    "example": "card1-text"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dtos.ListAllCardsResponsePaginated": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ListAllCardsResponse"
                    }
                },
                "next_cursor": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "dtos.ListAllColumnsResponse": {
            "type": "object",
            "properties": {
                "board_id": {
                    "type": "integer",
                    "example": 2
                },
                "color": {
                    "type": "string",
                    "example": "#FFFFFF"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "column1"
                },
                "position": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dtos.ListAllColumnsResponsePaginated": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ListAllColumnsResponse"
                    }
                },
                "next_cursor": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "dtos.ListAllPollsResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "poll1"
                },
                "team_id": {
                    "type": "integer",
                    "example": 2
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dtos.ListAllTeamsResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "team1"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dtos.ListAllTeamsResponsePaginated": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ListAllTeamsResponse"
                    }
                },
                "next_cursor": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "dtos.ListCardResponse": {
            "type": "object",
            "properties": {
                "column_id": {
                    "type": "integer",
                    "example": 2
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "member_id": {
                    "type": "integer",
                    "example": 2
                },
                "text": {
                    "type": "string",
                    "example": "card1-text"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dtos.ListPollResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "poll1"
                },
                "team_id": {
                    "type": "integer",
                    "example": 2
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dtos.MoveCardtoAnotherColumnRequest": {
            "type": "object",
            "properties": {
                "new_column_id": {
                    "type": "integer",
                    "example": 3
                }
            }
        },
        "dtos.OptionTexts": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string"
                }
            }
        },
        "dtos.Poll": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.OptionTexts"
                    }
                }
            }
        },
        "dtos.RefreshAuthTokenRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dtos.ShowPollResultResponse": {
            "type": "object",
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/application.Option"
                    }
                },
                "total": {
                    "type": "integer"
                },
                "winner": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/application.Winner"
                    }
                }
            }
        },
        "dtos.ShowTeamResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "team1"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dtos.SigninUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "teste@teste.com"
                }
            }
        },
        "dtos.SigninUserResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dtos.SystemInfo": {
            "type": "object",
            "properties": {
                "environment": {
                    "type": "string",
                    "example": "develop"
                }
            }
        },
        "identity.RefreshAuthTokenEnvelope": {
            "type": "object",
            "properties": {
                "refreshed_token": {
                    "type": "string"
                }
            }
        },
        "identity.SigninUserEnvelope": {
            "type": "object",
            "properties": {
                "signin_tokens": {
                    "$ref": "#/definitions/dtos.SigninUserResponse"
                }
            }
        },
        "monitor.HealthCheckEnvelope": {
            "type": "object",
            "properties": {
                "health_check": {
                    "$ref": "#/definitions/dtos.HealthCheckResponse"
                }
            }
        },
        "poll.ListAllPollsEnvelop": {
            "type": "object",
            "properties": {
                "polls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ListAllPollsResponse"
                    }
                }
            }
        },
        "poll.ListPollEnvelop": {
            "type": "object",
            "properties": {
                "poll": {
                    "$ref": "#/definitions/dtos.ListPollResponse"
                }
            }
        },
        "poll.ShowPollResultEnvelop": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/dtos.ShowPollResultResponse"
                }
            }
        },
        "team.CreateTeamEnvelop": {
            "type": "object",
            "properties": {
                "team": {
                    "$ref": "#/definitions/dtos.CreateTeamResponse"
                }
            }
        },
        "team.ListAllTeamsEnvelop": {
            "type": "object",
            "properties": {
                "teams": {
                    "$ref": "#/definitions/dtos.ListAllTeamsResponsePaginated"
                }
            }
        },
        "team.ShowTeamEnvelop": {
            "type": "object",
            "properties": {
                "team": {
                    "$ref": "#/definitions/dtos.ShowTeamResponse"
                }
            }
        },
        "utils.ErrorEnvelope": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "error message"
                }
            }
        }
    },
    "securityDefinitions": {
        "": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}