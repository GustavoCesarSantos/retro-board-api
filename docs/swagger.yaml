basePath: /v1
definitions:
  application.Option:
    properties:
      name:
        example: "1"
        type: string
      votes:
        example: 1
        type: integer
    type: object
  application.Winner:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: "1"
        type: string
      votes:
        example: 1
        type: integer
    type: object
  board.CreateBoardEnvelop:
    properties:
      board:
        $ref: '#/definitions/dtos.CreateBoardResponse'
    type: object
  board.CreateCardEnvelop:
    properties:
      card:
        $ref: '#/definitions/dtos.CreateCardResponse'
    type: object
  board.CreateColumnEnvelop:
    properties:
      column:
        $ref: '#/definitions/dtos.CreateColumnResponse'
    type: object
  board.ListAllBoardsEnvelop:
    properties:
      boards:
        $ref: '#/definitions/dtos.ListAllBoardsResponsePaginated'
    type: object
  board.ListAllCardsEnvelop:
    properties:
      cards:
        $ref: '#/definitions/dtos.ListAllCardsResponsePaginated'
    type: object
  board.ListAllColumnsEnvelop:
    properties:
      columns:
        $ref: '#/definitions/dtos.ListAllColumnsResponsePaginated'
    type: object
  board.ListCardEnvelop:
    properties:
      card:
        $ref: '#/definitions/dtos.ListCardResponse'
    type: object
  dtos.AddMemberToTeamRequest:
    properties:
      email:
        example: useremail@foo.bar
        type: string
      role_id:
        example: 2
        type: integer
    type: object
  dtos.ChangeMemberRoleRequest:
    properties:
      role:
        example: 1
        type: integer
    type: object
  dtos.CreateBoardRequest:
    properties:
      name:
        example: board1
        type: string
    type: object
  dtos.CreateBoardResponse:
    properties:
      created_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: board1
        type: string
    type: object
  dtos.CreateCardRequest:
    properties:
      text:
        example: card1-text
        type: string
    type: object
  dtos.CreateCardResponse:
    properties:
      created_at:
        type: string
      id:
        example: 1
        type: integer
      text:
        example: card1-text
        type: string
    type: object
  dtos.CreateColumnRequest:
    properties:
      color:
        example: '#FFFFFF'
        type: string
      name:
        example: column1
        type: string
    type: object
  dtos.CreateColumnResponse:
    properties:
      color:
        example: '#FFFFFF'
        type: string
      created_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: column1
        type: string
    type: object
  dtos.CreatePollRequest:
    properties:
      poll:
        $ref: '#/definitions/dtos.Poll'
    type: object
  dtos.CreateTeamRequest:
    properties:
      name:
        type: string
    type: object
  dtos.CreateTeamResponse:
    properties:
      created_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: team1
        type: string
    type: object
  dtos.EditBoardRequest:
    properties:
      active:
        example: true
        type: boolean
      name:
        example: new-board1
        type: string
    type: object
  dtos.EditCardRequest:
    properties:
      text:
        example: new-card1-text
        type: string
    type: object
  dtos.EditColumnRequest:
    properties:
      color:
        example: '#000000'
        type: string
      name:
        example: new-column1
        type: string
    type: object
  dtos.HealthCheckResponse:
    properties:
      status:
        example: available
        type: string
      system_info:
        $ref: '#/definitions/dtos.SystemInfo'
    type: object
  dtos.ListAllBoardsResponse:
    properties:
      active:
        example: true
        type: boolean
      created_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: board1
        type: string
      team_id:
        example: 2
        type: integer
      updated_at:
        type: string
    type: object
  dtos.ListAllBoardsResponsePaginated:
    properties:
      items:
        items:
          $ref: '#/definitions/dtos.ListAllBoardsResponse'
        type: array
      next_cursor:
        example: 0
        type: integer
    type: object
  dtos.ListAllCardsResponse:
    properties:
      column_id:
        example: 2
        type: integer
      created_at:
        type: string
      id:
        example: 1
        type: integer
      member_id:
        example: 2
        type: integer
      text:
        example: card1-text
        type: string
      updated_at:
        type: string
    type: object
  dtos.ListAllCardsResponsePaginated:
    properties:
      items:
        items:
          $ref: '#/definitions/dtos.ListAllCardsResponse'
        type: array
      next_cursor:
        example: 0
        type: integer
    type: object
  dtos.ListAllColumnsResponse:
    properties:
      board_id:
        example: 2
        type: integer
      color:
        example: '#FFFFFF'
        type: string
      created_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: column1
        type: string
      position:
        example: 1
        type: integer
      updated_at:
        type: string
    type: object
  dtos.ListAllColumnsResponsePaginated:
    properties:
      items:
        items:
          $ref: '#/definitions/dtos.ListAllColumnsResponse'
        type: array
      next_cursor:
        example: 0
        type: integer
    type: object
  dtos.ListAllPollsResponse:
    properties:
      created_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: poll1
        type: string
      team_id:
        example: 2
        type: integer
      updated_at:
        type: string
    type: object
  dtos.ListAllTeamsResponse:
    properties:
      created_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: team1
        type: string
      updated_at:
        type: string
    type: object
  dtos.ListAllTeamsResponsePaginated:
    properties:
      items:
        items:
          $ref: '#/definitions/dtos.ListAllTeamsResponse'
        type: array
      next_cursor:
        example: 0
        type: integer
    type: object
  dtos.ListCardResponse:
    properties:
      column_id:
        example: 2
        type: integer
      created_at:
        type: string
      id:
        example: 1
        type: integer
      member_id:
        example: 2
        type: integer
      text:
        example: card1-text
        type: string
      updated_at:
        type: string
    type: object
  dtos.ListPollResponse:
    properties:
      created_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: poll1
        type: string
      team_id:
        example: 2
        type: integer
      updated_at:
        type: string
    type: object
  dtos.MoveCardtoAnotherColumnRequest:
    properties:
      new_column_id:
        example: 3
        type: integer
    type: object
  dtos.OptionTexts:
    properties:
      text:
        type: string
    type: object
  dtos.Poll:
    properties:
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/dtos.OptionTexts'
        type: array
    type: object
  dtos.RefreshAuthTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  dtos.ShowPollResultResponse:
    properties:
      options:
        additionalProperties:
          $ref: '#/definitions/application.Option'
        type: object
      total:
        type: integer
      winner:
        items:
          $ref: '#/definitions/application.Winner'
        type: array
    type: object
  dtos.ShowTeamResponse:
    properties:
      created_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: team1
        type: string
      updated_at:
        type: string
    type: object
  dtos.SigninUserRequest:
    properties:
      email:
        example: teste@teste.com
        type: string
    type: object
  dtos.SigninUserResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dtos.SystemInfo:
    properties:
      environment:
        example: develop
        type: string
    type: object
  identity.RefreshAuthTokenEnvelope:
    properties:
      refreshed_token:
        type: string
    type: object
  identity.SigninUserEnvelope:
    properties:
      signin_tokens:
        $ref: '#/definitions/dtos.SigninUserResponse'
    type: object
  monitor.HealthCheckEnvelope:
    properties:
      health_check:
        $ref: '#/definitions/dtos.HealthCheckResponse'
    type: object
  poll.ListAllPollsEnvelop:
    properties:
      polls:
        items:
          $ref: '#/definitions/dtos.ListAllPollsResponse'
        type: array
    type: object
  poll.ListPollEnvelop:
    properties:
      poll:
        $ref: '#/definitions/dtos.ListPollResponse'
    type: object
  poll.ShowPollResultEnvelop:
    properties:
      result:
        $ref: '#/definitions/dtos.ShowPollResultResponse'
    type: object
  team.CreateTeamEnvelop:
    properties:
      team:
        $ref: '#/definitions/dtos.CreateTeamResponse'
    type: object
  team.ListAllTeamsEnvelop:
    properties:
      teams:
        $ref: '#/definitions/dtos.ListAllTeamsResponsePaginated'
    type: object
  team.ShowTeamEnvelop:
    properties:
      team:
        $ref: '#/definitions/dtos.ShowTeamResponse'
    type: object
  utils.ErrorEnvelope:
    properties:
      error:
        example: error message
        type: string
    type: object
host: localhost:9000
info:
  contact: {}
  description: Documentação da API.
  termsOfService: http://swagger.io/terms/
  title: Retro Board API
  version: "1.0"
paths:
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: This endpoint accepts a refresh token and returns a new access
        token if the refresh token is valid.
      parameters:
      - description: Refresh token
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.RefreshAuthTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Access token refreshed successfully
          schema:
            $ref: '#/definitions/identity.RefreshAuthTokenEnvelope'
        "400":
          description: Invalid request (e.g., missing parameters or invalid refresh
            token or invalid credentials)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      summary: Refresh access token using the provided refresh token
      tags:
      - Identity
  /auth/signin:
    post:
      consumes:
      - application/json
      description: This endpoint signs in a user based on their email, generates an
        access token and a refresh token.
      parameters:
      - description: User email
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.SigninUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens generated successfully
          schema:
            $ref: '#/definitions/identity.SigninUserEnvelope'
        "400":
          description: Invalid request (e.g., missing parameters)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      summary: Sign in user and generate access and refresh tokens
      tags:
      - Identity
  /auth/signin/google:
    get:
      description: This endpoint starts the OAuth2.0 sign-in flow with Google.
      produces:
      - application/json
      responses:
        "200":
          description: Redirecting to Google for authentication
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      summary: Initiates OAuth2.0 sign-in with Google
      tags:
      - Identity
  /auth/signout:
    post:
      description: This endpoint invalidates the user's current session by incrementing
        their token version.
      produces:
      - application/json
      responses:
        "204":
          description: User signed out successfully
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Sign out the current user
      tags:
      - Identity
  /healthcheck:
    get:
      description: Returns the current health status of the application and environment
        information.
      produces:
      - application/json
      responses:
        "200":
          description: Health check result
          schema:
            $ref: '#/definitions/monitor.HealthCheckEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      summary: Application health check
      tags:
      - Monitor
  /teams:
    get:
      description: This endpoint fetches all teams associated with the currently authenticated
        user.
      produces:
      - application/json
      responses:
        "200":
          description: List of teams successfully retrieved
          schema:
            $ref: '#/definitions/team.ListAllTeamsEnvelop'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: List all teams
      tags:
      - Team
    post:
      description: This endpoint allows a user to create a new team and automatically
        assigns the user as the admin of the team.
      parameters:
      - description: Name of the team to be created
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateTeamRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Team created successfully
          schema:
            $ref: '#/definitions/team.CreateTeamEnvelop'
        "400":
          description: Invalid request (e.g., missing parameters)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Create a new team
      tags:
      - Team
  /teams/:teamId:
    get:
      description: This endpoint retrieves detailed information about a specific team.
        The user must be a member of the team to access this information.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Details of the team
          schema:
            $ref: '#/definitions/team.ShowTeamEnvelop'
        "404":
          description: Not Found - Team not found or user not a member
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Get details of a specific team
      tags:
      - Team
  /teams/:teamId/boards:
    get:
      consumes:
      - application/json
      description: Retrieves all boards associated with a specific team.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of boards
          schema:
            $ref: '#/definitions/board.ListAllBoardsEnvelop'
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Team not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: List all boards for a team
      tags:
      - Board
    post:
      consumes:
      - application/json
      description: Creates a board associated with the specified team.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board creation data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateBoardRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Board successfully created
          schema:
            $ref: '#/definitions/board.CreateBoardEnvelop'
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Team not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Create a new board
      tags:
      - Board
  /teams/:teamId/boards/:boardId:
    delete:
      consumes:
      - application/json
      description: Deletes a board associated with the specified team and board ID.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board ID
        in: path
        name: boardId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Board successfully deleted
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Team or board not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Delete a board
      tags:
      - Board
    put:
      consumes:
      - application/json
      description: Updates the name or activation status of a board.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Board update details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dtos.EditBoardRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Board successfully updated
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Team or board not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Edit a board
      tags:
      - Board
  /teams/:teamId/boards/:boardId/columns:
    get:
      consumes:
      - application/json
      description: Retrieves all columns associated with a specific board.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board ID
        in: path
        name: boardId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of columns
          schema:
            $ref: '#/definitions/board.ListAllColumnsEnvelop'
        "400":
          description: Invalid request (e.g., missing parameters or invalid input
            data)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: List all columns for a board
      tags:
      - Board
    post:
      consumes:
      - application/json
      description: Creates a column associated with the specified board and team.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Column creation data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateColumnRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Column successfully created
          schema:
            $ref: '#/definitions/board.CreateColumnEnvelop'
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Team or board not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Create a new column
      tags:
      - Board
  /teams/:teamId/boards/:boardId/columns/:columnId:
    delete:
      consumes:
      - application/json
      description: Deletes a column associated with the specified team, board, and
        column ID.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Column ID
        in: path
        name: columnId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Column successfully deleted
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Team, board, or column not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Delete a column
      tags:
      - Board
    put:
      consumes:
      - application/json
      description: Updates the details of a column, such as name and color.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Column ID
        in: path
        name: columnId
        required: true
        type: integer
      - description: Column update details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dtos.EditColumnRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Column successfully updated
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Team, board, or column not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Edit a column
      tags:
      - Board
  /teams/:teamId/boards/:boardId/columns/:columnId/cards:
    get:
      consumes:
      - application/json
      description: Retrieves all cards associated with a specific column on a board.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Column ID
        in: path
        name: columnId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of cards
          schema:
            $ref: '#/definitions/board.ListAllCardsEnvelop'
        "400":
          description: Invalid request (e.g., missing parameters or invalid input
            data)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Board or column not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: List all cards for a column on a board
      tags:
      - Board
    post:
      consumes:
      - application/json
      description: Creates a card associated with the specified column, board, and
        team.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Column ID
        in: path
        name: columnId
        required: true
        type: integer
      - description: Card creation data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateCardRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Card successfully created
          schema:
            $ref: '#/definitions/board.CreateCardEnvelop'
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Team, board, or column not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Create a new card
      tags:
      - Board
  /teams/:teamId/boards/:boardId/columns/:columnId/cards/:cardId:
    delete:
      consumes:
      - application/json
      description: Deletes a card associated with the specified team, board, column,
        and card ID.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Column ID
        in: path
        name: columnId
        required: true
        type: integer
      - description: Card ID
        in: path
        name: cardId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Card successfully deleted
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Team, board, column, or card not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Delete a card
      tags:
      - Board
    get:
      consumes:
      - application/json
      description: Retrieves the details of a specific card based on its ID.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Column ID
        in: path
        name: columnId
        required: true
        type: integer
      - description: Card ID
        in: path
        name: cardId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Card details
          schema:
            $ref: '#/definitions/board.ListCardEnvelop'
        "400":
          description: Invalid request (e.g., missing parameters or invalid input
            data)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Card not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Get a single card by ID
      tags:
      - Board
    put:
      consumes:
      - application/json
      description: Updates the text content of a card.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Column ID
        in: path
        name: columnId
        required: true
        type: integer
      - description: Card ID
        in: path
        name: cardId
        required: true
        type: integer
      - description: Card update details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dtos.EditCardRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Card successfully updated
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Team, board, column, or card not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Edit a card
      tags:
      - Board
  /teams/:teamId/boards/:boardId/columns/:columnId/cards/:cardId/move:
    put:
      consumes:
      - application/json
      description: Moves a card from one column to another in a specific board.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Board ID
        in: path
        name: boardId
        required: true
        type: integer
      - description: Column ID
        in: path
        name: columnId
        required: true
        type: integer
      - description: Card ID
        in: path
        name: cardId
        required: true
        type: integer
      - description: New Column ID
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dtos.MoveCardtoAnotherColumnRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Card moved successfully
        "400":
          description: Invalid request (e.g., missing parameters or invalid input
            data)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Card or column not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Move a card to another column
      tags:
      - Board
  /teams/:teamId/members:
    post:
      description: Adds a new member to a team with a specific role, provided the
        authenticated user is an admin of the team.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Member details (ID and role)
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.AddMemberToTeamRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Member added successfully
        "400":
          description: Invalid request (e.g., missing parameters or insufficient permissions)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Team not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Adds a member to a team
      tags:
      - Team
  /teams/:teamId/members/:memberId:
    delete:
      description: This endpoint removes a specific member from a team. Only admins
        are allowed to perform this operation.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Member ID
        in: path
        name: memberId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Member removed successfully
        "400":
          description: Invalid request (e.g., Invalid input or unauthorized operation)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Not Found - Team or member not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Remove a member from a team
      tags:
      - Team
  /teams/:teamId/members/:memberId/roles:
    patch:
      description: This endpoint allows an admin of a team to change the role of another
        member within the team.
      parameters:
      - description: ID of the team
        in: path
        name: teamId
        required: true
        type: string
      - description: ID of the member whose role is being changed
        in: path
        name: memberId
        required: true
        type: string
      - description: New role for the member
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dtos.ChangeMemberRoleRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Role updated successfully
        "400":
          description: Invalid request (e.g., missing parameters or insufficient permissions)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Team or member not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Change a member's role in a team
      tags:
      - Team
  /teams/:teamId/polls:
    get:
      consumes:
      - application/json
      description: Retrieves all polls associated with a specific team.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of polls
          schema:
            $ref: '#/definitions/poll.ListAllPollsEnvelop'
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: List all polls
      tags:
      - Poll
    post:
      consumes:
      - application/json
      description: Creates a new poll with options for a specific team.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Poll creation data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dtos.CreatePollRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Poll created successfully
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Create a new poll
      tags:
      - Poll
  /teams/:teamId/polls/:pollId:
    get:
      consumes:
      - application/json
      description: Retrieves detailed information about a specific poll.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Poll ID
        in: path
        name: pollId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Poll details
          schema:
            $ref: '#/definitions/poll.ListPollEnvelop'
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Poll not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Get poll details
      tags:
      - Poll
  /teams/:teamId/polls/:pollId/options/:optionId:
    delete:
      consumes:
      - application/json
      description: Deletes an option from a specific poll, ensuring proper ownership
        validation.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Poll ID
        in: path
        name: pollId
        required: true
        type: integer
      - description: Option ID
        in: path
        name: optionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Option deleted successfully
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Delete an option from a poll
      tags:
      - Poll
  /teams/:teamId/polls/:pollId/options/:optionId/vote:
    post:
      consumes:
      - application/json
      description: Cast a vote for a specific option in a poll.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Poll ID
        in: path
        name: pollId
        required: true
        type: integer
      - description: Option ID
        in: path
        name: optionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Vote successfully recorded
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "403":
          description: User is not allowed to vote on this poll
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Poll or option not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Vote in a poll
      tags:
      - Poll
  /teams/:teamId/polls/:pollId/result:
    get:
      consumes:
      - application/json
      description: Retrieves the result of a poll, including the total votes, votes
        per option, and the winning option.
      parameters:
      - description: Team ID
        in: path
        name: teamId
        required: true
        type: integer
      - description: Poll ID
        in: path
        name: pollId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Poll results
          schema:
            $ref: '#/definitions/poll.ShowPollResultEnvelop'
        "400":
          description: Invalid request (e.g., missing parameters or validation error)
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "404":
          description: Poll not found
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorEnvelope'
      security:
      - BearerAuth: []
      summary: Show poll result
      tags:
      - Poll
securityDefinitions:
  "":
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
